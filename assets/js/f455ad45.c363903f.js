"use strict";(self.webpackChunkfirplak_documentation=self.webpackChunkfirplak_documentation||[]).push([[845],{3905:function(e,t,n){n.d(t,{Zo:function(){return u},kt:function(){return f}});var r=n(7294);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function i(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function o(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?i(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function s(e,t){if(null==e)return{};var n,r,a=function(e,t){if(null==e)return{};var n,r,a={},i=Object.keys(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var c=r.createContext({}),l=function(e){var t=r.useContext(c),n=t;return e&&(n="function"==typeof e?e(t):o(o({},t),e)),n},u=function(e){var t=l(e.components);return r.createElement(c.Provider,{value:t},e.children)},p={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},d=r.forwardRef((function(e,t){var n=e.components,a=e.mdxType,i=e.originalType,c=e.parentName,u=s(e,["components","mdxType","originalType","parentName"]),d=l(n),f=a,h=d["".concat(c,".").concat(f)]||d[f]||p[f]||i;return n?r.createElement(h,o(o({ref:t},u),{},{components:n})):r.createElement(h,o({ref:t},u))}));function f(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var i=n.length,o=new Array(i);o[0]=d;var s={};for(var c in t)hasOwnProperty.call(t,c)&&(s[c]=t[c]);s.originalType=e,s.mdxType="string"==typeof e?e:a,o[1]=s;for(var l=2;l<i;l++)o[l]=n[l];return r.createElement.apply(null,o)}return r.createElement.apply(null,n)}d.displayName="MDXCreateElement"},9176:function(e,t,n){n.r(t),n.d(t,{frontMatter:function(){return s},contentTitle:function(){return c},metadata:function(){return l},toc:function(){return u},default:function(){return d}});var r=n(7462),a=n(3366),i=(n(7294),n(3905)),o=["components"],s={title:"facture"},c="Module `src.lib.facture`",l={unversionedId:"desarrollos/Reenvio a Facture/lib/facture",id:"desarrollos/Reenvio a Facture/lib/facture",title:"facture",description:"Global variables",source:"@site/docs/desarrollos/Reenvio a Facture/lib/facture.md",sourceDirName:"desarrollos/Reenvio a Facture/lib",slug:"/desarrollos/Reenvio a Facture/lib/facture",permalink:"/documentacion/docs/desarrollos/Reenvio a Facture/lib/facture",editUrl:"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/desarrollos/Reenvio a Facture/lib/facture.md",tags:[],version:"current",frontMatter:{title:"facture"},sidebar:"defaultSidebar",previous:{title:"constants",permalink:"/documentacion/docs/desarrollos/Reenvio a Facture/lib/constants"},next:{title:"mail",permalink:"/documentacion/docs/desarrollos/Reenvio a Facture/lib/mail"}},u=[{value:"Global variables",id:"global-variables",children:[],level:2},{value:"Functions",id:"functions",children:[],level:2},{value:"Args",id:"args",children:[],level:2},{value:"Returns",id:"returns",children:[],level:2},{value:"Args",id:"args-1",children:[],level:2},{value:"Returns",id:"returns-1",children:[],level:2},{value:"Returns",id:"returns-2",children:[],level:2}],p={toc:u};function d(e){var t=e.components,n=(0,a.Z)(e,o);return(0,i.kt)("wrapper",(0,r.Z)({},p,n,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("h1",{id:"module-srclibfacture"},"Module ",(0,i.kt)("inlineCode",{parentName:"h1"},"src.lib.facture")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-python"},'    import pytest\n    import http.client\n    import json\n    from datetime import date\n    from .constants import CONFIG\n    import requests\n    \n    \n    FACTURE_CREDENTIALS: str = {\n        "USER": CONFIG["Facture"]["USERNAME"],\n        "PASSWORD": CONFIG["Facture"]["PASSWORD"],\n    }\n    """str: The credentials for connection with the Facture API"""\n    \n    \n    def getFactureJWT() -> str:\n        """\n        It authenticates with the Facture API and returns a JWT\n    \n        Returns:\n                JWT (str): A JWT for connection with the Facture API\n        """\n    \n        url = "https://api.facture.co/PLColab.Identity/Auth/Login"\n    \n        payload = {\n            "u": FACTURE_CREDENTIALS["USER"],\n            "p": FACTURE_CREDENTIALS["PASSWORD"],\n            "ft": "issuer|Receiver",\n        }\n        headers = {"Content-Type": "application/json"}\n    \n        response = requests.request(\n            "POST", url, json=payload, headers=headers, timeout=20)\n    \n        try:\n            return json.loads(response.text)["accessToken"]\n        except json.decoder.JSONDecodeError:\n            return\n    \n    \n    def getFactureInvoices(JWT: str) -> list:\n        """\n        It gets all the invoices from the Facture API that were sent today\n    \n        Args:\n                JWT (str): A JWT for connection with the Facture API\n    \n        Returns:\n                invoices (list): All invoices received in the current day\n        """\n    \n        url = "https://fone-reception-inbox-pro.azurewebsites.net/PLColab.Inbox/Notification/PRINCIPAL/With/RECEIVED;ACKNOWLEDGED;RECEIVEDGOODS/WithNot/ACCEPTED;REJECTED/0b409936-666f-4a61-8efd-a9c400d9fa7f"\n    \n        querystring = {\n            "receiverStartingDate": f"{str(date.today())}T00:00:00.000Z",\n            "receiverEndingDate": f"{str(date.today())}T23:59:59.000Z",\n            "pageIndex": "1",\n            "pageSize": "100",\n        }\n    \n        payload = ""\n        headers = {\n            "Content-Type": "application/x-www-form-urlencoded",\n            "Authorization": f"Bearer {JWT}",\n        }\n    \n        response = requests.request(\n            "GET", url, data=payload, headers=headers, params=querystring, timeout=20\n        )\n    \n        try:\n            return json.loads(response.text)["items"]\n        except json.decoder.JSONDecodeError:\n            return\n    \n    \n    def getFactureInvoiceDetails(JWT: str, invoiceLdf: str) -> dict:\n        """\n        Gets the details of a specific invoice in the Facture API\n    \n        Args:\n                JWT (str): A JWT for connection with the Facture API\n                invoiceLdf (str): The LDF of the invoice to get the details\n    \n        Returns:\n                invoiceDetails (dict): The details of the invoice\n        """\n    \n        if (invoiceLdf.split("-"))[0] == "NC":\n            return\n    \n        conn = http.client.HTTPSConnection(\n            "fone-reception-inbox-pro.azurewebsites.net")\n        headers = {"Authorization": f"Bearer {JWT}"}\n    \n        conn.request("GET", "/PLColab.Documents/Document/Get/" +\n                     invoiceLdf, "", headers)\n    \n        res = conn.getresponse()\n        data = res.read()\n    \n        try:\n            return json.loads(data.decode("utf-8"))\n        except json.decoder.JSONDecodeError:\n            return\n    \n    \n    @pytest.fixture\n    def jwt():\n        """For testing purposes"""\n        return getFactureJWT()\n    \n    \n    def test_getFactureJWT(jwt):\n        """For testing purposes"""\n        assert type(jwt) is str\n        assert len(jwt) > 0\n    \n    \n    @pytest.fixture\n    def invoices(jwt):\n        """For testing purposes"""\n        return getFactureInvoices(jwt)\n    \n    \n    def test_getFactureInvoices(invoices):\n        """For testing purposes"""\n        assert type(invoices) is list\n        assert len(invoices) > 0\n    \n    \n    @pytest.fixture\n    def invoiceDetails(jwt, invoices):\n        """For testing purposes"""\n        return getFactureInvoiceDetails(jwt, invoices[0]["ldf"])\n    \n    \n    def test_getFactureInvoiceDetails(invoiceDetails):\n        """For testing purposes"""\n        assert type(invoiceDetails) is dict\n')),(0,i.kt)("h2",{id:"global-variables"},"Global variables"),(0,i.kt)("p",null,(0,i.kt)("inlineCode",{parentName:"p"},"var FACTURE_CREDENTIALS :\xa0str")),(0,i.kt)("p",null,"str: The credentials for connection with the Facture API"),(0,i.kt)("h2",{id:"functions"},"Functions"),(0,i.kt)("p",null,(0,i.kt)("inlineCode",{parentName:"p"},"def getFactureInvoiceDetails(JWT:\xa0str, invoiceLdf:\xa0str) \u2011>\xa0dict")),(0,i.kt)("p",null,"Gets the details of a specific invoice in the Facture API"),(0,i.kt)("h2",{id:"args"},"Args"),(0,i.kt)("p",null,(0,i.kt)("strong",{parentName:"p"},(0,i.kt)("inlineCode",{parentName:"strong"},"JWT"))," :\u2002",(0,i.kt)("inlineCode",{parentName:"p"},"str")),(0,i.kt)("p",null,"A JWT for connection with the Facture API"),(0,i.kt)("p",null,(0,i.kt)("strong",{parentName:"p"},(0,i.kt)("inlineCode",{parentName:"strong"},"invoiceLdf"))," :\u2002",(0,i.kt)("inlineCode",{parentName:"p"},"str")),(0,i.kt)("p",null,"The LDF of the invoice to get the details"),(0,i.kt)("h2",{id:"returns"},"Returns"),(0,i.kt)("p",null,"invoiceDetails (dict): The details of the invoice"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-python"},'    def getFactureInvoiceDetails(JWT: str, invoiceLdf: str) -> dict:\n        """\n        Gets the details of a specific invoice in the Facture API\n    \n        Args:\n                JWT (str): A JWT for connection with the Facture API\n                invoiceLdf (str): The LDF of the invoice to get the details\n    \n        Returns:\n                invoiceDetails (dict): The details of the invoice\n        """\n    \n        if (invoiceLdf.split("-"))[0] == "NC":\n            return\n    \n        conn = http.client.HTTPSConnection(\n            "fone-reception-inbox-pro.azurewebsites.net")\n        headers = {"Authorization": f"Bearer {JWT}"}\n    \n        conn.request("GET", "/PLColab.Documents/Document/Get/" +\n                     invoiceLdf, "", headers)\n    \n        res = conn.getresponse()\n        data = res.read()\n    \n        try:\n            return json.loads(data.decode("utf-8"))\n        except json.decoder.JSONDecodeError:\n            return\n')),(0,i.kt)("p",null,(0,i.kt)("inlineCode",{parentName:"p"},"def getFactureInvoices(JWT:\xa0str) \u2011>\xa0list")),(0,i.kt)("p",null,"It gets all the invoices from the Facture API that were sent today"),(0,i.kt)("h2",{id:"args-1"},"Args"),(0,i.kt)("p",null,(0,i.kt)("strong",{parentName:"p"},(0,i.kt)("inlineCode",{parentName:"strong"},"JWT"))," :\u2002",(0,i.kt)("inlineCode",{parentName:"p"},"str")),(0,i.kt)("p",null,"A JWT for connection with the Facture API"),(0,i.kt)("h2",{id:"returns-1"},"Returns"),(0,i.kt)("p",null,"invoices (list): All invoices received in the current day"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-python"},'    def getFactureInvoices(JWT: str) -> list:\n        """\n        It gets all the invoices from the Facture API that were sent today\n    \n        Args:\n                JWT (str): A JWT for connection with the Facture API\n    \n        Returns:\n                invoices (list): All invoices received in the current day\n        """\n    \n        url = "https://fone-reception-inbox-pro.azurewebsites.net/PLColab.Inbox/Notification/PRINCIPAL/With/RECEIVED;ACKNOWLEDGED;RECEIVEDGOODS/WithNot/ACCEPTED;REJECTED/0b409936-666f-4a61-8efd-a9c400d9fa7f"\n    \n        querystring = {\n            "receiverStartingDate": f"{str(date.today())}T00:00:00.000Z",\n            "receiverEndingDate": f"{str(date.today())}T23:59:59.000Z",\n            "pageIndex": "1",\n            "pageSize": "100",\n        }\n    \n        payload = ""\n        headers = {\n            "Content-Type": "application/x-www-form-urlencoded",\n            "Authorization": f"Bearer {JWT}",\n        }\n    \n        response = requests.request(\n            "GET", url, data=payload, headers=headers, params=querystring, timeout=20\n        )\n    \n        try:\n            return json.loads(response.text)["items"]\n        except json.decoder.JSONDecodeError:\n            return\n')),(0,i.kt)("p",null,(0,i.kt)("inlineCode",{parentName:"p"},"def getFactureJWT() \u2011>\xa0str")),(0,i.kt)("p",null,"It authenticates with the Facture API and returns a JWT"),(0,i.kt)("h2",{id:"returns-2"},"Returns"),(0,i.kt)("p",null,"JWT (str): A JWT for connection with the Facture API"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-python"},'    def getFactureJWT() -> str:\n        """\n        It authenticates with the Facture API and returns a JWT\n    \n        Returns:\n                JWT (str): A JWT for connection with the Facture API\n        """\n    \n        url = "https://api.facture.co/PLColab.Identity/Auth/Login"\n    \n        payload = {\n            "u": FACTURE_CREDENTIALS["USER"],\n            "p": FACTURE_CREDENTIALS["PASSWORD"],\n            "ft": "issuer|Receiver",\n        }\n        headers = {"Content-Type": "application/json"}\n    \n        response = requests.request(\n            "POST", url, json=payload, headers=headers, timeout=20)\n    \n        try:\n            return json.loads(response.text)["accessToken"]\n        except json.decoder.JSONDecodeError:\n            return\n')),(0,i.kt)("p",null,(0,i.kt)("inlineCode",{parentName:"p"},"def invoiceDetails(jwt, invoices)")),(0,i.kt)("p",null,"For testing purposes"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-python"},'    @pytest.fixture\n    def invoiceDetails(jwt, invoices):\n        """For testing purposes"""\n        return getFactureInvoiceDetails(jwt, invoices[0]["ldf"])\n')),(0,i.kt)("p",null,(0,i.kt)("inlineCode",{parentName:"p"},"def invoices(jwt)")),(0,i.kt)("p",null,"For testing purposes"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-python"},'    @pytest.fixture\n    def invoices(jwt):\n        """For testing purposes"""\n        return getFactureInvoices(jwt)\n')),(0,i.kt)("p",null,(0,i.kt)("inlineCode",{parentName:"p"},"def jwt()")),(0,i.kt)("p",null,"For testing purposes"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-python"},'    @pytest.fixture\n    def jwt():\n        """For testing purposes"""\n        return getFactureJWT()\n')),(0,i.kt)("p",null,(0,i.kt)("inlineCode",{parentName:"p"},"def test_getFactureInvoiceDetails(invoiceDetails)")),(0,i.kt)("p",null,"For testing purposes"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-python"},'    def test_getFactureInvoiceDetails(invoiceDetails):\n        """For testing purposes"""\n        assert type(invoiceDetails) is dict\n')),(0,i.kt)("p",null,(0,i.kt)("inlineCode",{parentName:"p"},"def test_getFactureInvoices(invoices)")),(0,i.kt)("p",null,"For testing purposes"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-python"},'    def test_getFactureInvoices(invoices):\n        """For testing purposes"""\n        assert type(invoices) is list\n        assert len(invoices) > 0\n')),(0,i.kt)("p",null,(0,i.kt)("inlineCode",{parentName:"p"},"def test_getFactureJWT(jwt)")),(0,i.kt)("p",null,"For testing purposes"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-python"},'    def test_getFactureJWT(jwt):\n        """For testing purposes"""\n        assert type(jwt) is str\n        assert len(jwt) > 0\n')),(0,i.kt)("h1",{id:"index"},"Index"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("h3",{parentName:"li",id:"super-module"},"Super-module"),(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("a",{parentName:"li",href:"..",title:"src.lib"},"src.lib")))),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("h3",{parentName:"li",id:"global-variables-1"},(0,i.kt)("a",{parentName:"h3",href:"#header-variables"},"Global variables")),(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("a",{parentName:"li",href:"#src.lib.facture.FACTURE_CREDENTIALS",title:"src.lib.facture.FACTURE_CREDENTIALS"},"FACTURE_CREDENTIALS")))),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("h3",{parentName:"li",id:"functions-1"},(0,i.kt)("a",{parentName:"h3",href:"#header-functions"},"Functions")),(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("a",{parentName:"li",href:"#src.lib.facture.getFactureInvoiceDetails",title:"src.lib.facture.getFactureInvoiceDetails"},"getFactureInvoiceDetails")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("a",{parentName:"li",href:"#src.lib.facture.getFactureInvoices",title:"src.lib.facture.getFactureInvoices"},"getFactureInvoices")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("a",{parentName:"li",href:"#src.lib.facture.getFactureJWT",title:"src.lib.facture.getFactureJWT"},"getFactureJWT")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("a",{parentName:"li",href:"#src.lib.facture.invoiceDetails",title:"src.lib.facture.invoiceDetails"},"invoiceDetails")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("a",{parentName:"li",href:"#src.lib.facture.invoices",title:"src.lib.facture.invoices"},"invoices")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("a",{parentName:"li",href:"#src.lib.facture.jwt",title:"src.lib.facture.jwt"},"jwt")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("a",{parentName:"li",href:"#src.lib.facture.test_getFactureInvoiceDetails",title:"src.lib.facture.test_getFactureInvoiceDetails"},"test_getFactureInvoiceDetails")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("a",{parentName:"li",href:"#src.lib.facture.test_getFactureInvoices",title:"src.lib.facture.test_getFactureInvoices"},"test_getFactureInvoices")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("a",{parentName:"li",href:"#src.lib.facture.test_getFactureJWT",title:"src.lib.facture.test_getFactureJWT"},"test_getFactureJWT"))))),(0,i.kt)("p",null,"Generated by ",(0,i.kt)("a",{parentName:"p",href:"https://pdoc3.github.io/pdoc",title:"pdoc: Python API documentation generator"},"pdoc 0.10.0"),"."))}d.isMDXComponent=!0}}]);